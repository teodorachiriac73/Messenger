import socket
import threading
from datetime import datetime
import tkinter as tk

stop_client = threading.Event()

def log_message(message):
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    with open(f"{nickname}.txt", 'a') as file:
        file.write(f"[{timestamp}] {message}\n")

client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
client.connect_ex(("localhost", 1234))

def receive_message_from_srv():
    while not stop_client.is_set():
        try:
            message = client.recv(1024).decode('ascii')
            if message == 'the server is closing':
                client.send('exit'.encode('ascii'))
                stop_client.set()
                tkWindow.quit()
                client.close()
                return
            elif message == 'already connected!':
                status_label.config(text='Status: user already connected', fg='red')
                client.send('exit'.encode('ascii'))
                stop_client.wait(5)
                stop_client.set()
                tkWindow.quit()
                client.close()
                return
            elif message.startswith('login:'):
                if message == 'login:failed':
                    print('Please enter a valid nickname and password')
                    nickname_entry.delete(0, tk.END)
                    password_entry.delete(0, tk.END)
                    status_label.config(text='Status: Login failed', fg='red')
                else:
                    print('login message: ', message)
                    status_label.config(text='Status: Login successful', fg='green')
                    nickname_entry.config(state='disabled')
                    password_entry.config(state='disabled')
                    login_button.config(state='disabled')
                    open_chat_window()  
            else:
                log_message(message)
                print(message)
                
                if 'chat_textbox' in globals():
                    chat_textbox.config(state='normal')
                    chat_textbox.insert(tk.END, message + '\n')
                    chat_textbox.config(state='disabled')
                    chat_textbox.see(tk.END)
        except Exception as e:
            print("An error occurred:", e)
            client.close()
            break

def login():
    global nickname, password
    nickname = nickname_entry.get()
    password = password_entry.get()
    try:
        client.send(nickname.encode('ascii'))
        client.send(password.encode('ascii'))
    except Exception as e:
        print('Error at login', e)

def open_chat_window():
    global chat_window, chat_textbox, chat_entry, send_button

    
    chat_window = tk.Toplevel(tkWindow)
    chat_window.title('Chat Window')
    chat_window.geometry('500x500')
    chat_window.resizable(True, True)

    
    chat_textbox = tk.Text(chat_window, state='disabled', wrap='word')
    chat_textbox.pack(padx=10, pady=10, fill='both', expand=True)

    
    chat_entry = tk.Entry(chat_window)
    chat_entry.pack(padx=10, pady=5, fill='x')

   
    send_button = tk.Button(chat_window, text='Send', command=send_message)
    send_button.pack(padx=10, pady=5)

    
    tkWindow.withdraw()

def send_message():
    message = chat_entry.get()
    if message.strip():
        new_message = f'{nickname}: {message}'
        log_message(new_message)
        client.send(new_message.encode('ascii'))
        chat_entry.delete(0, tk.END)

def close_app():
    client.send('exit'.encode('ascii'))
    stop_client.set()
    client.close()
    tkWindow.destroy()


receive_thread = threading.Thread(target=receive_message_from_srv)
receive_thread.start()


tkWindow = tk.Tk()
tkWindow.title('Messenger app')
tkWindow.geometry('400x400')
tkWindow.resizable(True, True)

nickname_label = tk.Label(tkWindow, text='Enter a nickname')
nickname_label.pack(padx=10, pady=5)

nickname_entry = tk.Entry(tkWindow)
nickname_entry.pack(padx=10, pady=5)

password_label = tk.Label(tkWindow, text='Enter a password')
password_label.pack(padx=10, pady=5)

password_entry = tk.Entry(tkWindow)
password_entry.pack(padx=10, pady=5)

login_button = tk.Button(tkWindow, text='Login', command=login)
login_button.pack(padx=10, pady=5)

status_label = tk.Label(tkWindow, text='Status:', fg='blue')
status_label.pack(padx=10, pady=5)

tkWindow.protocol("WM_DELETE_WINDOW", close_app)
tkWindow.mainloop()
